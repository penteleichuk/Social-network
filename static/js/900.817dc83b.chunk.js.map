{"version":3,"file":"static/js/900.817dc83b.chunk.js","mappings":"sMACA,EAA0B,yBAA1B,EAAiE,6BAAjE,EAAuG,wBAAvG,EAA2K,0BAA3K,EAA+M,yB,mBCOlMA,EAAa,SAACC,GACvB,IAAQC,EAAaD,EAAbC,KAAMC,EAAOF,EAAPE,GACRC,EAAI,mBAAeD,GAEzB,OACI,gBAAKE,UAAWC,EAAhB,UACI,SAAC,KAAD,CAASC,GAAIH,EAAb,SAAoBF,OCPnBM,EAAU,SAACP,GACpB,OAAO,gBAAKI,UAAWC,EAAhB,SAAiCL,EAAMQ,W,mBCD5CC,EAAmBC,EAAAA,GAAW,CACnCF,QAASE,EAAAA,KAAaC,UAAU,iBAAiBC,SAAS,cAG9CC,EAAa,SAACb,GAM1B,OACC,SAAC,KAAD,CAAQc,cAAe,CAAEN,QAAS,IAAMO,SANjB,SAACP,EAAD,GAAgE,IAA/BQ,EAA8B,EAA9BA,UACxDhB,EAAMe,SAASP,EAAQA,SACvBQ,EAAU,KAIyDP,iBAAkBA,EAAkBQ,gBAAc,EAArH,SACE,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAASC,EAApB,EAAoBA,aAAcC,EAAlC,EAAkCA,WAAYC,EAA9C,EAA8CA,QAASC,EAAvD,EAAuDA,MAAvD,OACA,UAAC,KAAD,YACC,yBACEJ,EAAQX,SAAWU,EAAOV,UAAW,0BAAOU,EAAOV,aAErD,iBAAKJ,UAAU,WAAf,WACC,SAAC,KAAD,CAAOA,UAAW,WAAYoB,UAAW,WAAYvB,KAAK,UAAUwB,OAAQJ,EAAYK,SAAUN,KAClG,mBAAQO,UAAWL,IAAYC,EAAOK,KAAM,SAA5C,oCCCN,EArBgB,SAAC5B,GACb,IAAQ6B,EAA6B7B,EAA7B6B,YAAaC,EAAgB9B,EAAhB8B,YAEfC,EAAgBD,EAAYE,QAAQC,KAAI,SAACC,EAAIC,GAAL,OAAe,SAACpC,EAAD,CAAwBE,KAAMiC,EAAGjC,KAAMC,GAAIgC,EAAGhC,IAA7BiC,MACxEC,EAAiBN,EAAYO,SAASJ,KAAI,SAACC,EAAIC,GAAL,OAAe,SAAC5B,EAAD,CAAqBC,QAAS0B,EAAG1B,SAAnB2B,MAE7E,OACI,gBAAK/B,UAAU,UAAf,UACI,iBAAKA,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACK0B,KAEL,iBAAK3B,UAAWC,EAAhB,WACI,yBAAM+B,KACN,SAACvB,EAAD,CAAYE,SAAUc,aCY7BS,GAAmBC,EAAAA,EAAAA,KAC5BC,EAAAA,EAAAA,KAfoB,SAACC,GACrB,MAAO,CACHX,YAAaW,EAAMX,gBAIA,SAACY,GACxB,MAAO,CACHb,YAAa,SAACrB,GACVkC,GAASC,EAAAA,EAAAA,GAAmBnC,SAOpCoC,EAAAA,EAF4BL,CAG9BM,I,0HC1BIC,EAAkB,SAACL,GACrB,MAAO,CACHM,OAAQN,EAAMO,KAAKD,SAIpB,SAASH,EAAoBK,GAUhC,OAAOT,EAAAA,EAAAA,IAAQM,EAARN,EARP,SAA2BxC,GACvB,IAAQ+C,EAAyB/C,EAAzB+C,OAAWG,ECjBZ,SAAkCC,EAAQC,GACvD,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IACIE,EAAKC,EADLC,GAAS,EAAAC,EAAA,GAA6BL,EAAQC,GAGlD,GAAIK,OAAOC,sBAAuB,CAChC,IAAIC,EAAmBF,OAAOC,sBAAsBP,GAEpD,IAAKG,EAAI,EAAGA,EAAIK,EAAiBC,OAAQN,IACvCD,EAAMM,EAAiBL,GACnBF,EAASS,QAAQR,IAAQ,GACxBI,OAAOK,UAAUC,qBAAqBC,KAAKb,EAAQE,KACxDE,EAAOF,GAAOF,EAAOE,IAIzB,OAAOE,EDCD,CAAiCvD,EAAjC,GAEA,OAAK+C,GAEE,SAACE,GAAD,UAAeC,KAFF,SAAC,KAAD,CAAU5C,GAAI","sources":["webpack://samurai/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Form/DialogForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","hoc/withAuthRedirect.tsx","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__oe96H\",\"dialogItems\":\"Dialogs_dialogItems__VFpmc\",\"dialog\":\"Dialogs_dialog__htSTl\",\"active\":\"Dialogs_active__t8cjl\",\"messages\":\"Dialogs_messages__Cg2l+\",\"message\":\"Dialogs_message__ZEWo0\"};","import styles from \"../Dialogs.module.css\";\nimport { NavLink } from \"react-router-dom\";\n\nexport type DialogType = {\n    id: number\n    name: string\n}\n\nexport const DialogItem = (props: DialogType) => {\n    const { name, id } = props;\n    const path = `/dialogs/${id}`\n\n    return (\n        <div className={styles.dialog}>\n            <NavLink to={path}>{name}</NavLink>\n        </div>\n    )\n}","import styles from \"../Dialogs.module.css\";\n\nexport type MessageType = {\n    id?: number\n    message: string\n}\n\nexport const Message = (props: MessageType) => {\n    return <div className={styles.message}>{props.message}</div>\n}","import { Field, Form, Formik, FormikValues } from \"formik\";\nimport * as yup from 'yup';\n\ntype DialogFormPropsType = {\n\tonSubmit: (message: string) => void\n}\n\nconst validationSchema = yup.object({\n\tmessage: yup.string().typeError('Invalid login').required('Required')\n})\n\nexport const DialogForm = (props: DialogFormPropsType) => {\n\tconst onSubmitHandler = (message: { message: string }, { resetForm }: FormikValues) => {\n\t\tprops.onSubmit(message.message);\n\t\tresetForm({})\n\t}\n\n\treturn (\n\t\t<Formik initialValues={{ message: '' }} onSubmit={onSubmitHandler} validationSchema={validationSchema} validateOnBlur>\n\t\t\t{({ errors, touched, handleChange, handleBlur, isValid, dirty }) => (\n\t\t\t\t<Form>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t{touched.message && errors.message && <span>{errors.message}</span>}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"textarea\">\n\t\t\t\t\t\t<Field className={'textarea'} component={'textarea'} name=\"message\" onBlur={handleBlur} onChange={handleChange} />\n\t\t\t\t\t\t<button disabled={!isValid && !dirty} type={'submit'} >Send message</button>\n\t\t\t\t\t</div>\n\t\t\t\t</Form>\n\t\t\t)}\n\t\t</Formik>\n\t);\n}","import { DialogItem } from \"./DialogItem/DialogItem\";\nimport { Message } from \"./Message/Message\";\nimport { DialogsPropsType } from \"./DialogsContainer\";\nimport { DialogForm } from \"../Form/DialogForm\";\nimport styles from './Dialogs.module.css'\n\nconst Dialogs = (props: DialogsPropsType) => {\n    const { sendMessage, dialogsPage } = props;\n\n    const dialogsRender = dialogsPage.dialogs.map((el, index) => <DialogItem key={index} name={el.name} id={el.id} />);\n    const messagesRender = dialogsPage.messages.map((el, index) => <Message key={index} message={el.message} />);\n\n    return (\n        <div className=\"content\">\n            <div className={styles.dialogs}>\n                <div className={styles.dialogItems}>\n                    {dialogsRender}\n                </div>\n                <div className={styles.messages}>\n                    <div>{messagesRender}</div>\n                    <DialogForm onSubmit={sendMessage} />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Dialogs;","import { connect } from \"react-redux\";\nimport { AppStateType } from \"../../redux/redux-store\";\nimport { compose, Dispatch } from \"redux\";\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\nimport { DialogsType, sendMessageCreator } from \"../../redux/reducers/dialogs-reducer\";\nimport Dialogs from \"./Dialogs\";\n\n// Dispatch type\ntype mapDispatchToPropsType = {\n    sendMessage: (message: string) => void\n}\ntype mapStateToPropsType = {\n    dialogsPage: DialogsType\n}\n\nexport type DialogsPropsType = mapDispatchToPropsType & mapStateToPropsType;\n\n// Dispatch connect\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n    return {\n        dialogsPage: state.dialogsPage,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\n    return {\n        sendMessage: (message: string) => {\n            dispatch(sendMessageCreator(message));\n        },\n    }\n}\n\nexport const DialogsContainer = compose<React.ComponentType>(\n    connect(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect\n)(Dialogs);\n","import { ComponentType } from \"react\";\nimport { Navigate } from \"react-router-dom\";\nimport { AppStateType } from \"../redux/redux-store\";\nimport { connect } from \"react-redux\";\n\ntype mapStateToPropsType = {\n    isAuth: boolean\n}\n\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\n\n    function RedirectComponent(props: mapStateToPropsType) {\n        const { isAuth, ...restProps } = props;\n\n        if (!isAuth) return <Navigate to={'/login'} />\n\n        return <Component {...restProps as T} />;\n    }\n\n    return connect(mapStateToProps)(RedirectComponent);\n}","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}"],"names":["DialogItem","props","name","id","path","className","styles","to","Message","message","validationSchema","yup","typeError","required","DialogForm","initialValues","onSubmit","resetForm","validateOnBlur","errors","touched","handleChange","handleBlur","isValid","dirty","component","onBlur","onChange","disabled","type","sendMessage","dialogsPage","dialogsRender","dialogs","map","el","index","messagesRender","messages","DialogsContainer","compose","connect","state","dispatch","sendMessageCreator","withAuthRedirect","Dialogs","mapStateToProps","isAuth","auth","Component","restProps","source","excluded","key","i","target","objectWithoutPropertiesLoose","Object","getOwnPropertySymbols","sourceSymbolKeys","length","indexOf","prototype","propertyIsEnumerable","call"],"sourceRoot":""}